#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <ctime>

using namespace std;

#define RESET   "\033[0m"
#define RED     "\033[31m"
#define GREEN   "\033[32m"
#define YELLOW  "\033[33m"
#define CYAN    "\033[36m"
#define BOLD    "\033[1m"

struct Attivit√† {
    string descrizione;
    string priorit√†;
    string data_creazione;
    string data_attivit√†;
    string ora_attivit√†;

    Attivit√†(string d, string p, string dataAtt, string oraAtt)
        : descrizione(std::move(d)), priorit√†(std::move(p)), data_attivit√†(std::move(dataAtt)), ora_attivit√†(std::move(oraAtt)) {
        time_t now = time(nullptr);
        data_creazione = string(ctime(&now));
        data_creazione.pop_back();
    }
};

int priorit√†Valore(const string& prio) {
    if (prio == "Alta") return 3;
    if (prio == "Media") return 2;
    return 1;
}

void ordinaPerPriorit√†(vector<Attivit√†>& lista) {
    sort(lista.begin(), lista.end(), [](const Attivit√†& a, const Attivit√†& b) {
        return priorit√†Valore(a.priorit√†) > priorit√†Valore(b.priorit√†);
    });
}

void disegnoTitolo() {
    cout << CYAN << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    cout << "‚ïë        üìò TO-DO LIST         ‚ïë\n";
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << RESET << endl;
}

void mostraMenu() {
    disegnoTitolo();
    cout << "1Ô∏è‚É£  Aggiungi attivita\n";
    cout << "2Ô∏è‚É£  Mostra attivita\n";
    cout << "3Ô∏è‚É£  Rimuovi attivita\n";
    cout << "4Ô∏è‚É£  Salva su file\n";
    cout << "5Ô∏è‚É£  Carica da file\n";
    cout << "6Ô∏è‚É£  Modifica attivita\n";
    cout << "7Ô∏è‚É£  Esci\n";
    cout << "‚û°Ô∏è  Scegli un'opzione: ";
}

void aggiungiAttivit√†(vector<Attivit√†>& lista) {
    string desc, prio, dataAtt, oraAtt;
    cout << "\n‚úèÔ∏è Inserisci la descrizione: ";
    cin.ignore();
    getline(cin, desc);

    cout << "üéØ Inserisci la priorita (Alta / Media / Bassa): ";
    getline(cin, prio);

    while (prio != "Alta" && prio != "Media" && prio != "Bassa") {
        cout << RED << "‚ùó Priorita non valida. Riprova (Alta / Media / Bassa): " << RESET;
        getline(cin, prio);
    }

    cout << "üìÖ Inserisci la data dell'attivita (es. 2025-06-20): ";
    getline(cin, dataAtt);

    cout << "üïí Inserisci l'ora dell'attivita (es. 14:30): ";
    getline(cin, oraAtt);

    lista.emplace_back(desc, prio, dataAtt, oraAtt);
    cout << GREEN << "‚úÖ Attivita aggiunta con successo!" << RESET << endl;
}

void mostraAttivit√†(vector<Attivit√†>& lista) {
    if (lista.empty()) {
        cout << YELLOW << "üì≠ Nessuna attivita trovata." << RESET << endl;
        return;
    }

    ordinaPerPriorit√†(lista);
    cout << BOLD << "\nüìã Elenco Attivita Ordinato per Priorita:\n" << RESET;
    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    for (size_t i = 0; i < lista.size(); ++i) {
        cout << i + 1 << ". " << lista[i].descrizione
             << " [" << lista[i].priorit√† << "]"
             << " üìÖ " << lista[i].data_attivit√†
             << " üïí " << lista[i].ora_attivit√†
             << " (Creato il: " << lista[i].data_creazione << ")\n";
    }
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";
}

void rimuoviAttivit√†(vector<Attivit√†>& lista) {
    mostraAttivit√†(lista);
    if (lista.empty()) return;

    int index;
    cout << "üóëÔ∏è Inserisci il numero dell'attivita da rimuovere: ";
    cin >> index;

    if (index < 1 || index > static_cast<int>(lista.size())) {
        cout << RED << "‚ö†Ô∏è Indice non valido." << RESET << endl;
    } else {
        lista.erase(lista.begin() + index - 1);
        cout << GREEN << "‚úÖ Attivita rimossa correttamente." << RESET << endl;
    }
}

void modificaAttivit√†(vector<Attivit√†>& lista) {
    mostraAttivit√†(lista);
    if (lista.empty()) return;

    int index;
    cout << "‚úèÔ∏è Inserisci il numero dell'attivita da modificare: ";
    cin >> index;
    cin.ignore();

    if (index < 1 || index > static_cast<int>(lista.size())) {
        cout << RED << "‚ö†Ô∏è Indice non valido." << RESET << endl;
        return;
    }

    Attivit√†& att = lista[index - 1];
    cout << "üìù Nuova descrizione (attuale: " << att.descrizione << "): ";
    getline(cin, att.descrizione);

    cout << "üéØ Nuova priorita (attuale: " << att.priorit√† << "): ";
    getline(cin, att.priorit√†);
    while (att.priorit√† != "Alta" && att.priorit√† != "Media" && att.priorit√† != "Bassa") {
        cout << RED << "‚ùó Priorita non valida. Riprova (Alta / Media / Bassa): " << RESET;
        getline(cin, att.priorit√†);
    }

    cout << "üìÖ Nuova data attivita (attuale: " << att.data_attivit√† << "): ";
    getline(cin, att.data_attivit√†);

    cout << "üïí Nuova ora attivita (attuale: " << att.ora_attivit√† << "): ";
    getline(cin, att.ora_attivit√†);

    cout << GREEN << "‚úÖ Attivita modificata con successo!" << RESET << endl;
}

void salvaSuFile(const vector<Attivit√†>& lista, const string& nome_file) {
    ofstream file(nome_file);
    if (!file) {
        cout << RED << "‚ùå Errore durante l'apertura del file." << RESET << endl;
        return;
    }

    for (const auto& att : lista) {
        file << att.descrizione << ";" << att.priorit√† << ";" << att.data_creazione
             << ";" << att.data_attivit√† << ";" << att.ora_attivit√† << "\n";
    }

    cout << GREEN << "üíæ Attivita salvate su '" << nome_file << "' con successo." << RESET << endl;
}

void caricaDaFile(vector<Attivit√†>& lista, const string& nome_file) {
    ifstream file(nome_file);
    if (!file) {
        cout << RED << "‚ùå File '" << nome_file << "' non trovato." << RESET << endl;
        return;
    }

    lista.clear();
    string linea;
    while (getline(file, linea)) {
        size_t primo = linea.find(';');
        size_t secondo = linea.find(';', primo + 1);
        size_t terzo = linea.find(';', secondo + 1);
        size_t quarto = linea.find(';', terzo + 1);

        if (primo != string::npos && secondo != string::npos && terzo != string::npos && quarto != string::npos) {
            string desc = linea.substr(0, primo);
            string prio = linea.substr(primo + 1, secondo - primo - 1);
            string creato = linea.substr(secondo + 1, terzo - secondo - 1);
            string dataAtt = linea.substr(terzo + 1, quarto - terzo - 1);
            string oraAtt = linea.substr(quarto + 1);

            Attivit√† nuova(desc, prio, dataAtt, oraAtt);
            nuova.data_creazione = creato;
            lista.push_back(nuova);
        }
    }

    cout << GREEN << "üìÇ Attivita caricate da '" << nome_file << "' con successo." << RESET << endl;
}

int main() {
    vector<Attivit√†> lista;
    int scelta;
    const string nome_file = "todo.txt";

    do {
        mostraMenu();
        cin >> scelta;

        switch (scelta) {
            case 1: aggiungiAttivit√†(lista); break;
            case 2: mostraAttivit√†(lista); break;
            case 3: rimuoviAttivit√†(lista); break;
            case 4: salvaSuFile(lista, nome_file); break;
            case 5: caricaDaFile(lista, nome_file); break;
            case 6: modificaAttivit√†(lista); break;
            case 7: cout << CYAN << "\nüëã Uscita dal programma. A presto!" << RESET << endl; break;
            default: cout << RED << "‚ùó Opzione non valida. Riprova." << RESET << endl;
        }
    } while (scelta != 7);

    return 0;
}

